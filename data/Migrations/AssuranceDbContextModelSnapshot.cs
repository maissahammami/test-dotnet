// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using domain.Data;

namespace data.Migrations
{
    [DbContext(typeof(AssuranceDbContext))]
    partial class AssuranceDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("domain.Models.Adherent", b =>
                {
                    b.Property<int>("AdherentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("AdherentId");

                    b.ToTable("Adherents");
                });

            modelBuilder.Entity("domain.Models.Agent", b =>
                {
                    b.Property<int>("AgentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("AgentId");

                    b.ToTable("Agents");
                });

            modelBuilder.Entity("domain.Models.Cotisation", b =>
                {
                    b.Property<int>("CotisationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdherentId")
                        .HasColumnType("int");

                    b.Property<int?>("DemandeAdhesionId")
                        .HasColumnType("int");

                    b.Property<decimal>("PartEmployeur")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PartSalarie")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Periode")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PrimeBrute")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("CotisationId");

                    b.HasIndex("AdherentId");

                    b.HasIndex("DemandeAdhesionId")
                        .IsUnique()
                        .HasFilter("[DemandeAdhesionId] IS NOT NULL");

                    b.ToTable("Cotisations");
                });

            modelBuilder.Entity("domain.Models.DemandeAdhesion", b =>
                {
                    b.Property<int>("DemandeAdhesionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdherentId")
                        .HasColumnType("int");

                    b.Property<int?>("AgentId")
                        .HasColumnType("int");

                    b.Property<int?>("CotisationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateDemande")
                        .HasColumnType("datetime2");

                    b.Property<int>("PlanSanteId")
                        .HasColumnType("int");

                    b.Property<int>("Statut")
                        .HasColumnType("int");

                    b.HasKey("DemandeAdhesionId");

                    b.HasIndex("AdherentId");

                    b.HasIndex("AgentId");

                    b.HasIndex("PlanSanteId");

                    b.ToTable("DemandesAdhesion");
                });

            modelBuilder.Entity("domain.Models.DemandeContreVisite", b =>
                {
                    b.Property<int>("DemandeVisiteControleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ControleurMedicalId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateDemande")
                        .HasColumnType("datetime2");

                    b.Property<string>("Motif")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int?>("RapportMedicalId")
                        .HasColumnType("int");

                    b.Property<int>("Statut")
                        .HasColumnType("int");

                    b.HasKey("DemandeVisiteControleId");

                    b.HasIndex("ControleurMedicalId");

                    b.ToTable("DemandeContreVisite");
                });

            modelBuilder.Entity("domain.Models.Facture", b =>
                {
                    b.Property<int>("FactureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CotisationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateEmission")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Montant")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("Statut")
                        .HasColumnType("int");

                    b.HasKey("FactureId");

                    b.HasIndex("CotisationId")
                        .IsUnique();

                    b.ToTable("Factures");
                });

            modelBuilder.Entity("domain.Models.MedecinControle", b =>
                {
                    b.Property<int>("ControleurMedicalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("ControleurMedicalId");

                    b.ToTable("MedecinControle");
                });

            modelBuilder.Entity("domain.Models.Paiement", b =>
                {
                    b.Property<int>("PaiementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdherentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DatePaiement")
                        .HasColumnType("datetime2");

                    b.Property<int>("FactureId")
                        .HasColumnType("int");

                    b.Property<int>("Methode")
                        .HasColumnType("int");

                    b.Property<decimal>("Montant")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PaiementId");

                    b.HasIndex("AdherentId");

                    b.HasIndex("FactureId");

                    b.ToTable("Paiements");
                });

            modelBuilder.Entity("domain.Models.PlanSante", b =>
                {
                    b.Property<int>("PlanSanteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("PlanSanteId");

                    b.ToTable("PlansSante");
                });

            modelBuilder.Entity("domain.Models.RapportMedical", b =>
                {
                    b.Property<int>("RapportMedicalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Conclusion")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<int>("ControleurMedicalId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime2");

                    b.Property<int>("DemandeVisiteControleId")
                        .HasColumnType("int");

                    b.HasKey("RapportMedicalId");

                    b.HasIndex("ControleurMedicalId");

                    b.HasIndex("DemandeVisiteControleId")
                        .IsUnique();

                    b.ToTable("RapportsMedical");
                });

            modelBuilder.Entity("domain.Models.Reclamation", b =>
                {
                    b.Property<int>("ReclamationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdherentId")
                        .HasColumnType("int");

                    b.Property<int?>("AgentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DemandeVisiteControleId")
                        .HasColumnType("int");

                    b.Property<int>("Statut")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("ReclamationId");

                    b.HasIndex("AdherentId");

                    b.HasIndex("AgentId");

                    b.HasIndex("DemandeVisiteControleId");

                    b.ToTable("Reclamations");
                });

            modelBuilder.Entity("domain.Models.Cotisation", b =>
                {
                    b.HasOne("domain.Models.Adherent", "Adherent")
                        .WithMany("Cotisations")
                        .HasForeignKey("AdherentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("domain.Models.DemandeAdhesion", "DemandeAdhesion")
                        .WithOne("Cotisation")
                        .HasForeignKey("domain.Models.Cotisation", "DemandeAdhesionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("domain.Models.DemandeAdhesion", b =>
                {
                    b.HasOne("domain.Models.Adherent", "Adherent")
                        .WithMany("DemandesAdhesion")
                        .HasForeignKey("AdherentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("domain.Models.Agent", "Agent")
                        .WithMany("DemandesAdhesion")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("domain.Models.PlanSante", "PlanSante")
                        .WithMany("DemandesAdhesion")
                        .HasForeignKey("PlanSanteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("domain.Models.DemandeContreVisite", b =>
                {
                    b.HasOne("domain.Models.MedecinControle", "MedecinControle")
                        .WithMany("DemandeContreVisites")
                        .HasForeignKey("ControleurMedicalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("domain.Models.Facture", b =>
                {
                    b.HasOne("domain.Models.Cotisation", "Cotisation")
                        .WithOne("Facture")
                        .HasForeignKey("domain.Models.Facture", "CotisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("domain.Models.Paiement", b =>
                {
                    b.HasOne("domain.Models.Adherent", "Adherent")
                        .WithMany("Paiements")
                        .HasForeignKey("AdherentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("domain.Models.Facture", "Facture")
                        .WithMany("Paiements")
                        .HasForeignKey("FactureId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("domain.Models.RapportMedical", b =>
                {
                    b.HasOne("domain.Models.MedecinControle", "MedecinControle")
                        .WithMany("RapportsMedical")
                        .HasForeignKey("ControleurMedicalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("domain.Models.DemandeContreVisite", "DemandeContreVisite")
                        .WithOne("RapportMedical")
                        .HasForeignKey("domain.Models.RapportMedical", "DemandeVisiteControleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("domain.Models.Reclamation", b =>
                {
                    b.HasOne("domain.Models.Adherent", "Adherent")
                        .WithMany("Reclamations")
                        .HasForeignKey("AdherentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("domain.Models.Agent", "Agent")
                        .WithMany("Reclamations")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("domain.Models.DemandeContreVisite", "DemandeContreVisite")
                        .WithMany("Reclamations")
                        .HasForeignKey("DemandeVisiteControleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
